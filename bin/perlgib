#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Cwd qw(cwd realpath);
use File::Spec::Functions qw(catdir rel2abs);
use Getopt::Long qw(:config require_order);
use Pod::Usage;
use Term::ANSIColor;
use Time::HiRes qw(gettimeofday);
use Try::Tiny;

use Perl::Gib;

$Term::ANSIColor::AUTORESET = 1;

no warnings "uninitialized";

my %opts;

sub print_usage {
    return pod2usage( -exitval => 255, -verbose => 0 );
}

sub print_help {
    return pod2usage(
        -exitval  => 0,
        -verbose  => 99,
        -sections => 'SYNOPSIS|OPTIONS|PARAMETERS',
    );
}

sub print_man {
    return pod2usage( -exitval => 0, -verbose => 2 );
}

sub print_version {
    printf "perlgib %s\n", $Perl::Gib::VERSION;

    return;
}

sub new_perlgib {
    my $args = shift;

    $args ||= {};
    $args->{'libpath'} = $opts{'libpath'} if ( $opts{'libpath'} );

    return Perl::Gib->new($args);
}

sub do_doc {
    my ( $docpath, $format );

    GetOptions(
        "doc-path|d=s" => \$docpath,
        "format|f=s"   => \$format,
    ) or return print_usage();

    $format ||= 'html';

    my $args = {};
    $args->{'docpath'} = $docpath if ($docpath);
    my $perlgib = new_perlgib($args);

    my %formats = (
        'html'     => 1,
        'markdown' => 1,
        'all'      => 1,
    );
    print_usage() if ( !$formats{$format} );

    $perlgib->doc()      if ( $format =~ /html|all/ );
    $perlgib->markdown() if ( $format =~ /markdown|all/ );

    return;
}

sub do_test {
    my $perlgib = new_perlgib();

    $perlgib->test();

    return;
}

sub do_action {
    my ( $lib, $method, $info ) = @_;

    $lib ||= catdir( cwd(), 'lib' );
    $lib = rel2abs( realpath($lib) );

    printf "%s (%s)\n", colored( $info, 'green' ), $lib;
    my $start = Time::HiRes::gettimeofday();

    my $rc = try {
        &$method();
        return 0;
    }
    catch {
        printf {*STDERR} "%s\n", ( split / at/ )[0];
        return 1;
    };

    my $stop = Time::HiRes::gettimeofday();
    printf "%s in %.2fs\n", colored( 'Finished', $rc ? 'red' : 'green' ),
      $stop - $start;

    return $rc;
}

sub run {
    GetOptions(
        "lib-path|l=s" => \$opts{'libpath'},
        "help|h"       => \$opts{'help'},
        "man|m"        => \$opts{'man'},
        "version|v"    => \$opts{'version'},
    ) or return print_usage();

    return print_help()    if ( $opts{'help'} );
    return print_man()     if ( $opts{'man'} );
    return print_version() if ( $opts{'version'} );

    my %METHOD = (
        doc  => [ \&do_doc,  'Documenting' ],
        test => [ \&do_test, 'Testing' ],
    );

    my $action = shift @ARGV;
    return print_usage() if ( !$METHOD{$action} );

    my ( $method, $info ) = @{ $METHOD{$action} };
    return do_action( $opts{'libpath'}, $method, $info );
}

exit run();

__END__

=encoding utf8

=head1 NAME

perlgib - Perl's alternative documentation and test manager.

=head1 SYNOPSIS

perlgib --help|-h | --man|-m | --version|-v

perlgib [--lib-path|-l PATH] ACTION

perlgib ... doc [--doc-path|-d PATH] [--format|-f html|markdown|all]

perlgib ... test

=head1 OPTIONS

=head2 base

=over 8

=item --lib-path|-l PATH

Directory with documents (Perl modules, Markdown) to process.

=item --help|-h

Print short usage help.

=item --man|-m

Print extended usage help.

=back

=head2 doc

Build library documentation.

=over 8

=item --doc-path|-d

Path for documentation output.

=item --format|-f html|markdown|all

Format of documentation output, default html.

=back

=head2 test

Execute documentation tests.

=head1 DESCRIPTION

perlgib is Perl's alternative documentation and test manager.

perlgib generates HTML documentation and runs tests from Perl code comment
lines.

=cut
